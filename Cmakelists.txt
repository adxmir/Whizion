cmake_minimum_required(VERSION  3.16)
project(Whizion)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

include(FetchContent)
#ASIO
FetchContent_Declare(
    asio
    GIT_REPOSITORY https://github.com/chriskohlhoff/asio.git
    GIT_TAG asio-1-30-2   
    GIT_SHALLOW ON)
FetchContent_MakeAvailable(asio)
#SDL2
find_package(PkgConfig REQUIRED)
pkg_check_modules(SDL2 REQUIRED sdl2)
pkg_check_modules(SDL2_IMAGE REQUIRED SDL2_image)
pkg_check_modules(SDL2_TTF REQUIRED sdl2_ttf)
include_directories(${SDL2_INCLUDE_DIRS} ${SDL2_IMAGE_INCLUDE_DIRS} ${SDL2_TTF_INCLUDE_DIRS})
link_directories(${SDL2_LIBRARY_DIRS} ${SDL2_IMAGE_LIBRARY_DIRS} ${SDL2_TTF_INCLUDE_DIRS})

file(GLOB_RECURSE SOURCES src/*.cpp)
add_executable(Whizion ${SOURCES})


target_include_directories(Whizion
 PRIVATE ${CMAKE_SOURCE_DIR}
 PRIVATE ${asio_SOURCE_DIR}/asio/include
 PRIVATE ${SDL2_LIBRARIES}
 PRIVATE ${SDL2_IMAGE_LIBRARIES}
 PRIVATE ${SDL2_TTF_INCLUDE_DIRS}
)

target_link_libraries(Whizion 
  PRIVATE ${SDL2_LIBRARIES}
  PRIVATE ${SDL2_IMAGE_LIBRARIES}
  PRIVATE ${SDL2_TTF_LIBRARIES}
)

if(MSVC) 
  target_compile_options(Whizion PRIVATE /W4)
else() 
  target_compile_options(Whizion PRIVATE -Wall -Wextra -pedantic) 
endif()